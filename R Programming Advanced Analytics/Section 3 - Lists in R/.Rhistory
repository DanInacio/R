{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
MyFirstVector <- c(3,45,56,732)
MyFirstVector
MyFirstVector <- c(3,45,56,732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector) # TRUE
is.numeric(V2) # TRUE
V2 <- c(3L,12L,243L,0L)
is.numeric(V2) # TRUE
is.integer(V2) # FALSE
is.double(V2) # TRUE
v3 <- c("a","B23","Hello")
is.character(v3) # TRUE
is.numeric(V3) # FALSE
is.numeric(v3) # FALSE
v3 <- c("a","B23","Hello", 7)
v3 <- c("a","B23","Hello", 7)
is.character(v3) # TRUE
is.numeric(v3) # FALSE
seq
seq(1,15)
seq(1,15,2)
z <- seq(1,15,4)
z
rep(3,50)
d <- rep(3,50)
d
rep("a",5)
x <- c(80,20)
x
rep(x,10)
y <- rep(x,10)
y
#3.2. Using brackets
x <- c(1,123,534,13,4) # Combine
y <- seq(201,250,11) # Sequence
z <- rep("Hi",3)
w <- c("a","b","c","d","e")
w
w[1]
w[-1]
w[-3]
v <- w[-3] # All except Pos3
w[1:3]
w[3:5]
w[c(1,3,5)]
w[c(-2,-4)]
w[-3:-5]
w[7]
#3.3. Vectorized Operations
x <- rnorm(5)
x
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
print(x[1])
x <- rnorm(5)
x
for(i in x)
{
print(x[i])
}
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
for(j in 1:5)
{
print(x[j])
}
N <- 100
a <- rnorm(N)
b <- rnorm(N)
#Vectorized Approach
c <- a*b
c
d <- rep(NA,N)
for(i in 1:N)
{
d[i] <- a[i]*b[i]
}
install.packages("ggplot2")
install.packages("DBI")
install.packages("ODBC")
y
install.packages("odbc")
install.packages("RMySQL")
install.packages("RPostgreSQL")
install.packages("RSQLite")
install.packages("XLConnect")
install.packages("xlsx")
install.packages("foreign")
install.packages("haven")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("rgl")
install.packages("htmlwidgets")
install.packages("googleVis")
install.packages("tidymodels")
install.packages("car")
install.packages("mgcv")
install.packages("lme4")
install.packages("nlme")
install.packages("randomForest")
install.packages("multcomp")
install.packages("vcd")
install.packages("glmnet")
install.packages("survival")
install.packages("caret")
install.packages("shiny")
install.packages("R Markdown")
install.packages("xtable")
#For Spatial Data
install.packages("sp")
install.packages("maptools")
install.packages("maps")
install.packages("ggmap")
#For Time Series and Financial Data
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("Rcpp")
install.packages("data.table")
install.packages("parallel")
#To work with the Web
install.packages("xml")
install.packages("jsonlite")
install.packages("httr")
#To work with the Web
install.packages("XML")
mydata <- read.csv(file.choose())
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
# To Visualize Data
install.packages("ggplot2")
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
View(mydata)
ggplot2(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
remove.packages("ggplot2") # Unisntall ggplot
install.packages("ggplot2") # Install it again
library(ggplot2)
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
library(ggplot2)
# Load Data
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 3 - Lists in R")
machDF <- read.csv("P3-Machine-Utilization.csv",
stringsAsFactors = TRUE)
library(ggplot2)
# Load Data
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 3 - Lists in R")
machDF <- read.csv("P3-Machine-Utilization.csv",
stringsAsFactors = TRUE)
View(machDF)
library(ggplot2)
# Load Data
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 3 - Lists in R")
machDF <- read.csv("P3-Machine-Utilization.csv",
stringsAsFactors = TRUE,
na.strings = c(""))
View(machDF)
# Initial Analysis
head(machDF)
tail(machDF)
str(machDF)
summary(machDF)
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 3 - Lists in R")
utilDF <- read.csv("P3-Machine-Utilization.csv",
stringsAsFactors = TRUE,
na.strings = c(""))
View(utilDF)
# Derive utilization column
machDF$Utilization <- 100 - machDF$Percent.Idle
# Derive utilization column
utilDF$Utilization <- 100 - utilDF$Percent.Idle
View(utilDF)
View(utilDF)
# Derive utilization column
utilDF$Utilization <- 1-utilDF$Percent.Idle
View(utilDF)
View(utilDF)
head(utilDF,12)
# Handling Date/Time in R
# Check if european or american date format
tail(utilDF,12)
# There is a universal format!
?POSIXct
POSIXct
?as.POSIXct
as.POSIXct(utilDF$Timestamp, format="%d/%m/%Y %H:%M")
head(utilDF,12)
utilDF$POSIXTime <- as.POSIXct(utilDF$Timestamp, format="%d/%m/%Y %H:%M")
head(utilDF,12)
summary(utilDF)
str(utilDF)
# TIP: Rearrange columns in a Data Frame
utilDF$Timestamp <- NULL
View(utilDF)
utilDF[,c(4,1,2,3)]
utilDF <- utilDF[,c(4,1,2,3)]
View(utilDF)
# ----------------------------------------------------------------------------
# What is a List?
summary(utilDF)
utilDF[utilDF$Machine=="RL1",]
RL1DF <- utilDF[utilDF$Machine=="RL1",]
View(RL1DF)
summary(RL1DF)
factor(RL1DF$Machine)
RL1DF$Machine <- factor(RL1DF$Machine)
summary(RL1DF)
min(RL1DF$Utilization)
mean(RL1DF$Utilization)
max(RL1DF$Utilization)
min(RL1DF$Utilization,na.rm = TRUE)
ean(RL1DF$Utilization,na.rm = TRUE)
mean(RL1DF$Utilization,na.rm = TRUE)
max(RL1DF$Utilization,na.rm = TRUE)
# Remove the NA's
listRL1_stats <- c(min(RL1DF$Utilization,na.rm = TRUE),
mean(RL1DF$Utilization,na.rm = TRUE),
max(RL1DF$Utilization,na.rm = TRUE))
listRL1_stats
RL1DF[RL1DF$Utilization < 0.9]
RL1DF[RL1DF$Utilization < 0.9,]
RL1DF$Utilization < 0.9
listRL1_below90 <- RL1DF$Utilization < 0.9
listRL1_below90
which(RL1DF$Utilization < 0.9)
listRL1_below90 <- which(RL1DF$Utilization < 0.9)
listRL1_below90
listRL1_below90 > 0
listRL1_below90 <- listRL1_below90 > 0
RL1DF$Utilization < 0.9
which(RL1DF$Utilization < 0.9)
listRL1_below90 <- which(RL1DF$Utilization < 0.9)
listRL1_below90
# OR
as.logical(listRL1_below90)
# OR
listRL1_below90 <- as.logical(listRL1_below90)
listRL1_below90
RL1DF$Utilization < 0.9
which(RL1DF$Utilization < 0.9)
listRL1_below90 <- which(RL1DF$Utilization < 0.9)
listRL1_below90
# OR
listRL1_below90 <- as.logical(listRL1_below90)
# We only want one single logical value, i.e. has it ever happened even once?
length(listRL1_below90) > 0
# We only want one single logical value, i.e. has it ever happened even once?
listRL1_below90 <- length(listRL1_below90) > 0
RL1DF$Utilization < 0.9
which(RL1DF$Utilization < 0.9)
listRL1_below90 <- which(RL1DF$Utilization < 0.9)
listRL1_below90 # int, not yet logical
listRL1_below90 <- listRL1_below90 > 0
# OR
listRL1_below90 <- as.logical(listRL1_below90)
# We only want one single logical value, i.e. has it ever happened even once?
listRL1_below90_flag <- length(listRL1_below90) > 0
# Create the list
RL1_List <- list("RL1",listRL1_stats,listRL1_below90_flag)
View(RL1_List)
View(RL1_List)
RL1_List
View(RL1_List)
# ----------------------------------------------------------------------------
# Naming components of a list
names(RL1_List)
View(RL1_List)
names(RL1_List) <- c("Machine","Stats","Low Threshold")
RL1_List
View(RL1_List)
names(RL1_List) <- c("Machine","Stats","LowThreshold")
RL1_List
View(RL1_List)
RL1_List <- list(Machine="RL1",
Stats=listRL1_stats,
LowThreshold=listRL1_below90_flag)
RL1_List
View(RL1_List)
# ----------------------------------------------------------------------------
# 3 Methods for Extracting components lists [] vs [[]] vs $
RL1_List
# ----------------------------------------------------------------------------
# 3 Methods for Extracting components lists [] vs [[]] vs $
RL1_List[1]
RL1_List["Machine"]
# 2nd Method: [[]] - will always return the object within the component
RL1_List[[1]]
# 2nd Method: [[]] - will always return the object within the component
RL1_List[["Machine"]]
# 3rd Method: $ - same as [[]] but cleaner
RL1_List$Machine
RL1_List[2]
RL1_List["Stats"]
RL1_List[[2]]
RL1_List[["Stats"]]
RL1_List$Stats
typeof(RL1_List[1])
typeof(RL1_List[[1]])
typeof(RL1_List$Machine)
typeof(RL1_List[2])
typeof(RL1_List[[2]])
typeof(RL1_List$Stats)
# How would you access the third element of the vector?
RL1_List$Stats[3]
# ----------------------------------------------------------------------------
# Adding and deleting components
RL1_List
RL1_List[4] <- "New Information"
View(RL1_List)
RL1_List[4] <- NewInformation="New Information"
# ----------------------------------------------------------------------------
# Adding and deleting components
RL1_List
# Another way (Vector: All hours where utilization is unknown)
RL1DF
RL1DF[is.na(RL1DF$Utilization)]
RL1DF[is.na(RL1DF$Utilization),]
RL1DF[is.na(RL1DF$Utilization),POSIXTime]
RL1DF[is.na(RL1DF$Utilization),RL1DF$POSIXTime]
RL1DF[is.na(RL1DF$Utilization),RL1DF$POSIXTime]
# Another way (Vector: All hours where utilization is unknown)
RL1DF
RL1DF[is.na(RL1DF$Utilization),]
RL1_NA <- RL1DF[is.na(RL1DF$Utilization),"POSIXTime"] # Just the hours
RL1DF[is.na(RL1DF$Utilization),"POSIXTime"]
RL1_List$UnknownHours <- RL1DF[is.na(RL1DF$Utilization),"POSIXTime"]
# ----------------------------------------------------------------------------
# Adding and deleting components
# Vector: All hours where utilization is unknown
# Dataframe: For RL1 Machine
# Plot: For all machines
RL1_List
View(RL1_List)
rm(RL1_NA)
# Another way (Vector: All hours where utilization is unknown)
RL1DF
RL1DF[is.na(RL1DF$Utilization),] # All rows
RL1DF[is.na(RL1DF$Utilization),"POSIXTime"] # Just the hours
RL1_List$UnknownHours <- RL1DF[is.na(RL1DF$Utilization),"POSIXTime"]
View(RL1_List)
View(RL1_List)
RL1_List[4] <- NULL
View(RL1_List)
RL1_List[10] <- "New Information"
View(RL1_List)
rm(RL1_List[10])
RL1_List[10] <- NULL
View(RL1_List)
RL1_List[5] <- NULL
RL1_List[6] <- NULL
RL1_List[7] <- NULL
RL1_List[8] <- NULL
View(RL1_List)
RL1_List[5] <- NULL
RL1_List[5] <- NULL
RL1_List[5] <- NULL
View(RL1_List)
RL1_List
# Notice, unlike a dataframe, indices have shifted!
RL1_List
# Add another component (Dataframe: For RL1 Machine)
RL1_List$Data <- RL1DF
View(RL1_List)
RL1_List
summary(RL1_List)
str(RL1_List)
# How would you access the first unknown date?
RL1_List$UnknownHours[1]
# How would you access the first unknown date?
RL1_List$[[4]][1]
# How would you access the first unknown date?
RL1_List[[4]][1]
# How would you access the first unknown date?
RL1_List$UnknownHours[1]
# To subset a list, and not values, use []
RL1_List[1]
RL1_List[1:2]
RL1_List[c(1,3)]
RL1_List[c(1,4)]
RL1_List[c("Machine","Stats")]
sublist_RL1 <- RL1_List[c("Machine","Stats")]
sublist_RL1
sublist_RL1$Stats[1]
View(utilDF)
View(utilDF)
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine))
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
facet_grid(~.Machine)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
facet_grid(.~Machine)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
facet_grid(Machine~.)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
geom_hline(yintercept=0.9, linetype="dashed", color = "Black") +
facet_grid(Machine~.)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
geom_hline(yintercept=0.9, linetype="dashed", color = "Gray") +
facet_grid(Machine~.)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
geom_hline(yintercept=0.9, linetype="dashed", color = "Gray", size=1.2) +
facet_grid(Machine~.)
p
p <- ggplot(data=utilDF) +
geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
geom_hline(yintercept=0.9, linetype="dotted", color = "Gray", size=1.2) +
facet_grid(Machine~.)
p
p <- ggplot(data=utilDF)
MyPlot <- p + geom_line(aes(x=POSIXTime,y=Utilization,
colour=Machine),size=1.2) +
geom_hline(yintercept=0.9, linetype="dotted", color = "Gray", size=1.2) +
facet_grid(Machine~.)
MyPlot
View(RL1_List)
RL1_List$Plot <- MyPlot
View(RL1_List)
RL1_List
summary(RL1_List)
str(RL1_List)
