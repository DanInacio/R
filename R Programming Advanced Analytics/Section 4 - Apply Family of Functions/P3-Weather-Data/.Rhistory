}
#2.6. If Statement
#Normal Distribution
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else
{
if(x>= -1){
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
#Normal Distribution
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
# ---- -2 ---- -1 ---- 0 ---- 1 ---- 2 ----
rm(answer)
x <- rnorm(1)
if(x>1)
{
answer <- "Greater than 1"
} else if(x>= -1)
{
answer <- "Between -1 and 1"
} else
{
answer <- "Lower than 1"
}
}
expectedX <- 68.2
number <- 0
for(i in 1:100)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
expectedX <- 68.2
number <- 0
for(i in 1:1000)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
expectedX <- 68.2
number <- 0
for(i in 1:10000)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
expectedX <- 68.2
number <- 0
for(i in 1:100000)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
expectedX <- 68.2
number <- 0
for(i in 1:1000000)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
expectedX <- 68.2
number <- 0
for(i in 1:10000)
{
X<- rnorm(1)
if(X>-1 & X<1)
{
number <- number+1
}
}
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(rnorm(i)>-1 & rnorm(i)<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(rnorm(N)>-1 & rnorm(N)<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
N <- 10000 # Sample size
counter <- 0 # Reset counter
for(i in rnorm(N))
{
if(i>-1 & i<1)
{
counter <- counter +1
}
}
answer <- counter/N
answer
MyFirstVector <- c(3,45,56,732)
MyFirstVector
MyFirstVector <- c(3,45,56,732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector) # TRUE
is.numeric(V2) # TRUE
V2 <- c(3L,12L,243L,0L)
is.numeric(V2) # TRUE
is.integer(V2) # FALSE
is.double(V2) # TRUE
v3 <- c("a","B23","Hello")
is.character(v3) # TRUE
is.numeric(V3) # FALSE
is.numeric(v3) # FALSE
v3 <- c("a","B23","Hello", 7)
v3 <- c("a","B23","Hello", 7)
is.character(v3) # TRUE
is.numeric(v3) # FALSE
seq
seq(1,15)
seq(1,15,2)
z <- seq(1,15,4)
z
rep(3,50)
d <- rep(3,50)
d
rep("a",5)
x <- c(80,20)
x
rep(x,10)
y <- rep(x,10)
y
#3.2. Using brackets
x <- c(1,123,534,13,4) # Combine
y <- seq(201,250,11) # Sequence
z <- rep("Hi",3)
w <- c("a","b","c","d","e")
w
w[1]
w[-1]
w[-3]
v <- w[-3] # All except Pos3
w[1:3]
w[3:5]
w[c(1,3,5)]
w[c(-2,-4)]
w[-3:-5]
w[7]
#3.3. Vectorized Operations
x <- rnorm(5)
x
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
print(x[1])
x <- rnorm(5)
x
for(i in x)
{
print(x[i])
}
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
for(j in 1:5)
{
print(x[j])
}
N <- 100
a <- rnorm(N)
b <- rnorm(N)
#Vectorized Approach
c <- a*b
c
d <- rep(NA,N)
for(i in 1:N)
{
d[i] <- a[i]*b[i]
}
install.packages("ggplot2")
install.packages("DBI")
install.packages("ODBC")
y
install.packages("odbc")
install.packages("RMySQL")
install.packages("RPostgreSQL")
install.packages("RSQLite")
install.packages("XLConnect")
install.packages("xlsx")
install.packages("foreign")
install.packages("haven")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("rgl")
install.packages("htmlwidgets")
install.packages("googleVis")
install.packages("tidymodels")
install.packages("car")
install.packages("mgcv")
install.packages("lme4")
install.packages("nlme")
install.packages("randomForest")
install.packages("multcomp")
install.packages("vcd")
install.packages("glmnet")
install.packages("survival")
install.packages("caret")
install.packages("shiny")
install.packages("R Markdown")
install.packages("xtable")
#For Spatial Data
install.packages("sp")
install.packages("maptools")
install.packages("maps")
install.packages("ggmap")
#For Time Series and Financial Data
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("Rcpp")
install.packages("data.table")
install.packages("parallel")
#To work with the Web
install.packages("xml")
install.packages("jsonlite")
install.packages("httr")
#To work with the Web
install.packages("XML")
mydata <- read.csv(file.choose())
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
# To Visualize Data
install.packages("ggplot2")
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
View(mydata)
ggplot2(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
remove.packages("ggplot2") # Unisntall ggplot
install.packages("ggplot2") # Install it again
library(ggplot2)
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data")
# ----------------------------------------------------------------------------
# Load Data
getwd()
Chicago <- read.csv("Chicago-C.csv",row.names = 1,
stringsAsFactors = TRUE,
na.strings = c(""))
View(Chicago)
View(Chicago)
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics" +
"\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data")
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data")
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data")
# ----------------------------------------------------------------------------
# Load Data
getwd()
setwd(c("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics",
"\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data"))
# ----------------------------------------------------------------------------
# Load Data
getwd()
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics",
"\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data"))
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 4 - ''Apply'' Family of Functions\\P3-Weather-Data"))
# ----------------------------------------------------------------------------
# Load Data
getwd()
Houston <- read.csv("Houston-C.csv",row.names = 1,
stringsAsFactors = TRUE,
na.strings = c(""))
NewYork <- read.csv("NewYork-C.csv",row.names = 1,
stringsAsFactors = TRUE,
na.strings = c(""))
SanFrancisco <- read.csv("SanFrancisco-C.csv",row.names = 1,
stringsAsFactors = TRUE,
na.strings = c(""))
read.csv("Chicago-C.csv")
# What if you had 1000 files?
# You need LAPPLY
?lapply
# Initial Analysis
is.data.frame(Chicago)
View(Chicago)
head(Chicago)
str(Chicago)
summary(Chicago)
