MyFirstVector
MyFirstVector <- c(3,45,56,732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector) # TRUE
is.numeric(V2) # TRUE
V2 <- c(3L,12L,243L,0L)
is.numeric(V2) # TRUE
is.integer(V2) # FALSE
is.double(V2) # TRUE
v3 <- c("a","B23","Hello")
is.character(v3) # TRUE
is.numeric(V3) # FALSE
is.numeric(v3) # FALSE
v3 <- c("a","B23","Hello", 7)
v3 <- c("a","B23","Hello", 7)
is.character(v3) # TRUE
is.numeric(v3) # FALSE
seq
seq(1,15)
seq(1,15,2)
z <- seq(1,15,4)
z
rep(3,50)
d <- rep(3,50)
d
rep("a",5)
x <- c(80,20)
x
rep(x,10)
y <- rep(x,10)
y
#3.2. Using brackets
x <- c(1,123,534,13,4) # Combine
y <- seq(201,250,11) # Sequence
z <- rep("Hi",3)
w <- c("a","b","c","d","e")
w
w[1]
w[-1]
w[-3]
v <- w[-3] # All except Pos3
w[1:3]
w[3:5]
w[c(1,3,5)]
w[c(-2,-4)]
w[-3:-5]
w[7]
#3.3. Vectorized Operations
x <- rnorm(5)
x
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
print(x[1])
x <- rnorm(5)
x
for(i in x)
{
print(x[i])
}
x <- rnorm(5)
x
for(i in x)
{
print(i)
}
for(j in 1:5)
{
print(x[j])
}
N <- 100
a <- rnorm(N)
b <- rnorm(N)
#Vectorized Approach
c <- a*b
c
d <- rep(NA,N)
for(i in 1:N)
{
d[i] <- a[i]*b[i]
}
install.packages("ggplot2")
install.packages("DBI")
install.packages("ODBC")
y
install.packages("odbc")
install.packages("RMySQL")
install.packages("RPostgreSQL")
install.packages("RSQLite")
install.packages("XLConnect")
install.packages("xlsx")
install.packages("foreign")
install.packages("haven")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggvis")
install.packages("rgl")
install.packages("htmlwidgets")
install.packages("googleVis")
install.packages("tidymodels")
install.packages("car")
install.packages("mgcv")
install.packages("lme4")
install.packages("nlme")
install.packages("randomForest")
install.packages("multcomp")
install.packages("vcd")
install.packages("glmnet")
install.packages("survival")
install.packages("caret")
install.packages("shiny")
install.packages("R Markdown")
install.packages("xtable")
#For Spatial Data
install.packages("sp")
install.packages("maptools")
install.packages("maps")
install.packages("ggmap")
#For Time Series and Financial Data
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("Rcpp")
install.packages("data.table")
install.packages("parallel")
#To work with the Web
install.packages("xml")
install.packages("jsonlite")
install.packages("httr")
#To work with the Web
install.packages("XML")
mydata <- read.csv(file.choose())
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
# To Visualize Data
install.packages("ggplot2")
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
View(mydata)
ggplot2(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
remove.packages("ggplot2") # Unisntall ggplot
install.packages("ggplot2") # Install it again
library(ggplot2)
ggplot(data=mydata[mydata$carat<2.5,],
aes(x=carat,y=price, colour=clarity)) +
geom_point(alpha=0.1) +
geom_smooth()
getwd()
setwd("C:\\Users\\Daniel.Inacio\\Desktop\\R Programming Advanced Analytics\\Section 2 - Data Preparation")
futureDF <- read.csv("P3-Future-500-The-Dataset.csv",
stringsAsFactors = TRUE,
na.strings = c(""))
futureDF$ID <- factor(futureDF$ID)
futureDF$Inception <- factor(futureDF$Inception)
str(futureDF)
futureDF$Expenses <- gsub(" Dollars","",futureDF$Expenses)
futureDF$Expenses <- gsub(",","",futureDF$Expenses)
head(futureDF)
str(futureDF) # Expenses is now of char type
futureDF$Revenue <- gsub("\\$","",futureDF$Revenue)
futureDF$Revenue <- gsub(",","",futureDF$Revenue)
head(futureDF)
str(futureDF) # Revenue is now of char type
futureDF$Growth <- gsub("%","",futureDF$Growth)
head(futureDF)
str(futureDF) # Growth is now of char type
# Finally, make them numeric
futureDF$Expenses <- as.numeric(futureDF$Expenses)
futureDF$Revenue <- as.numeric(futureDF$Revenue)
futureDF$Growth <- as.numeric(futureDF$Growth)
str(futureDF)
# If you check a summary, look at NA's
summary(futureDF)
futureDF[futureDF$Revenue == 9746272,]
futureDF[which(futureDF$Revenue == 9746272),]
# ----------------------------------------------------------------------------
# Filtering: using is.na() for non-missing data
futureDF[!complete.cases(futureDF),]
futureDF[is.na(futureDF$Expenses),]
# BACKUP so we don't need to run the whole code so far
futureDF_backup <- futureDF
futureDF[!complete.cases(futureDF),]
futureDF[!complete.cases(futureDF),]
futureDF[is.na(futureDF$Industry),]
futureDF <- futureDF[!is.na(futureDF$Industry),]
futureDF[!complete.cases(futureDF),]
# ----------------------------------------------------------------------------
# Resetting the Dataframe Index
futureDF
# ----------------------------------------------------------------------------
# Resetting the Dataframe Index
head(futureDF,20)
tail(futureDF)
?rownames(futureDF)
rownames(futureDF)
nrow(futureDF)
rownames(futureDF,1:nrow(futureDF))
rownames(1:nrow(futureDF))
1:nrow(futureDF)
rownames(futureDF) <- 1:nrow(futureDF)
futureDF
head(futureDF)
head(futureDF,20)
tail(futureDF)
futureDF <- futureDF_backup
futureDF[!complete.cases(futureDF),]
futureDF[is.na(futureDF$Industry),] # Which rows have Industry as NA
futureDF[!is.na(futureDF$Industry),] # All the rows EXCEPT industry as NA
futureDF <- futureDF[!is.na(futureDF$Industry),]
rownames(futureDF) <- NULL
futureDF
head(futureDF,20)
tail(futureDF)
futureDF
head(futureDF,20)
futureDF
# ----------------------------------------------------------------------------
# Replacing Missing Data: Factual Analysis
futureDF[!complete.cases(futureDF),]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Factual Analysis
futureDF[!complete.cases(futureDF),]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Factual Analysis
futureDF[!complete.cases(futureDF),]
# State can be filled in with 100% certainty
futureDF[is.na(futureDF$State),]
futureDF[is.na(futureDF$State) & futureDF$City == "New York",]
futureDF[is.na(futureDF$State) & futureDF$City == "New York","State"] <- "NY"
# State can be filled in with 100% certainty
futureDF[is.na(futureDF$State),]
futureDF(c(11,377))
futureDF[c(11,377)]
futureDF[c(11,377),]
futureDF[is.na(futureDF$State) & futureDF$City == "San Francisco",]
futureDF[is.na(futureDF$State) & futureDF$City == "San Francisco","State"] <- "CA"
futureDF[c(82,265),]
futureDF[!complete.cases(futureDF),]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method
# Employees
futureDF[is.na(futureDF$Employees)]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method
# Employees
futureDF[is.na(futureDF$Employees),]
median(futureDF)
median(futureDF$Employees)
futureDF[futureDF$Industry == "Retail"]
futureDF[futureDF$Industry == "Retail"],
futureDF[futureDF$Industry == "Retail",]
futureDF[futureDF$Industry == "Retail","Employees"]
median(futureDF[futureDF$Industry == "Retail","Employees"])
median(futureDF[!is.na(futureDF$Employees) & futureDF$Industry == "Retail","Employees"])
futureDF[!is.na(futureDF$Employees) & futureDF$Industry == "Retail","Employees"]
median(futureDF[futureDF$Industry == "Retail","Employees"],na.rm==TRUE)
median(futureDF[futureDF$Industry == "Retail","Employees"],na.rm=TRUE)
medianEmployeeRetail <- median(futureDF[!is.na(futureDF$Employees) & futureDF$Industry == "Retail","Employees"])
# Assign median to empty cells
futureDF[is.na(futureDF$Employees),]
# Assign median to empty cells
futureDF[is.na(futureDF$Employees) & futureDF$Industry == "Retail",]
futureDF[is.na(futureDF$Employees) & futureDF$Industry == "Retail","Employees"] <- medianEmployeeRetail
futureDF(3)
futureDF[3]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method
# Employees
futureDF[is.na(futureDF$Employees),]
futureDF[ID==3]
futureDF[ID==3,]
futureDF[ID=3,]
futureDF[ID=3]
futureDF[futureDF$ID==3]
futureDF[futureDF$ID==3,]
futureDF[3,]
# Financial Services
futureDF[is.na(futureDF$Employees),]
futureDF[futureDF$Industry == "Financial Services","Employees"],na.rm=TRUE
futureDF[futureDF$Industry == "Financial Services",
futureDF[futureDF$Industry == "Financial Services",]
# Get median
futureDF[futureDF$Industry == "Financial Services","Employees"]
# Get median
futureDF[futureDF$Industry == "Financial Services",]
# Get median
futureDF[futureDF$Industry == "Financial Services","Employees"]
median(futureDF[futureDF$Industry == "Financial Services","Employees"],na.rm=TRUE)
medianEmployeeFinancial <- median(futureDF[futureDF$Industry == "Financial Services","Employees"],na.rm=TRUE)
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method
# Employees
futureDF[is.na(futureDF$Employees),]
futureDF[330,] # Check
# Assign median
futureDF[is.na(futureDF$Employees) & futureDF$Industry == "Financial Services","Employees"] <- medianEmployeeFinancial
futureDF[330,] # Check
futureDF[!complete.cases(futureDF),]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method (Part 2)
futureDF[!complete.cases(futureDF),]
# Get median
futureDF[,futureDF$Growth]
# Get median
futureDF[futureDF$Growth,]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method (Part 2)
futureDF[!complete.cases(futureDF),]
# Get median
median(futureDF[futureDF$Industry == "Construction","Growth"],na.rm=TRUE)
median(futureDF[futureDF$Growth])
median(futureDF[futureDF$Growth],)
median(futureDF$Growth)
median(futureDF$Growth,na.rm=TRUE)
medianGrowth <- median(futureDF[futureDF$Industry == "Construction","Growth"],na.rm=TRUE)
# BONUS: median of an entire column without filters
# median(futureDF$Growth,na.rm=TRUE)
median(futureDF[,"Growth"])
# BONUS: median of an entire column without filters
# median(futureDF$Growth,na.rm=TRUE)
median(futureDF[,"Growth"],na.rm=TRUE)
rm(medianGrowth)
medianGrowthConstruction <- median(futureDF[futureDF$Industry == "Construction","Growth"],na.rm=TRUE)
futureDF[is.na(futureDF$Growth) & futureDF$Industry == "Construction","Growth"]
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method (Part 2)
futureDF[!complete.cases(futureDF),]
# Assign median
futureDF[is.na(futureDF$Growth) & futureDF$Industry == "Construction","Growth"] <- medianGrowthConstruction
futureDF[8,] # Check
# ----------------------------------------------------------------------------
# Replacing Missing Data: Median Imputation Method (Part 2)
futureDF[!complete.cases(futureDF),]
# Get median
medianRevenueConstruction <- median(futureDF[futureDF$Industry == "Construction","Revenue"],na.rm=TRUE)
futureDF[is.na(futureDF$Revenue) & futureDF$Industry == "Construction","Revenue"]
futureDF[is.na(futureDF$Revenue) & futureDF$Industry == "Construction",]
medianRevenueConstruction
# Assign median
futureDF[is.na(futureDF$Revenue) & futureDF$Industry == "Construction","Revenue"] <- medianRevenueConstruction
futureDF[c(8,42),] # Check
futureDF[!complete.cases(futureDF),]
# Get median
medianExpensesConstruction <- median(futureDF[futureDF$Industry == "Construction","Expenses"],na.rm=TRUE)
medianExpensesConstruction
futureDF[is.na(futureDF$Expenses) &
is.na(futureDF$Profit) & futureDF$Industry == "Construction",]
futureDF[!complete.cases(futureDF),]
futureDF[is.na(futureDF$Expenses) & futureDF$Industry == "Construction","Expenses"]
# Assign median
futureDF[is.na(futureDF$Expenses) &
is.na(futureDF$Profit) & futureDF$Industry == "Construction","Expenses"] <- medianExpensesConstruction
futureDF[c(8,42),] # Check
futureDF[!complete.cases(futureDF),]
futureDF[!complete.cases(futureDF),]
# Revenue-Expenses=Profit
futureDF[is.na(futureDF$Profit),]
# Revenue-Expenses=Profit
futureDF[is.na(futureDF$Profit),"Profit"]
futureDF[is.na(futureDF$Profit),"Revenue"]
futureDF[is.na(futureDF$Profit),"Profit"] <- futureDF[is.na(futureDF$Profit),"Revenue"] -
futureDF[is.na(futureDF$Profit),"Expenses"]
futureDF[c(8,42),] # Check
futureDF[!complete.cases(futureDF),]
# Revenue-Profit=Expenses
futureDF[is.na(futureDF$Expenses),]
# Revenue-Profit=Expenses
futureDF[is.na(futureDF$Expenses),]
futureDF[is.na(futureDF$Expenses),"Expenses"] <- futureDF[is.na(futureDF$Expenses),"Revenue"] -
futureDF[is.na(futureDF$Expenses),"Profit"]
futureDF[15,] # Check
futureDF[!complete.cases(futureDF),]
library(ggplot2)
# We will leave Inception as NA since it won't affect our analysis
finalDF <- futureDF
View(finalDF)
finalDF[!complete.cases(finalDF),]
ggplot(data=finalDF,mapping=aes(x=Revenue,y=Expenses,Industry)) +
geom_point()
# Scatterplot, classified by industry, showing revenue, expenses, profit
p <- ggplot(data=finalDF,mapping=aes(x=Revenue,y=Expenses,colour=Industry)) +
geom_point()
# Scatterplot, classified by industry, showing revenue, expenses, profit
p <- ggplot(data=finalDF,mapping=aes(x=Revenue,y=Expenses,Industry,colour=Industry)) +
geom_point()
# Scatterplot, classified by industry, showing revenue, expenses, profit
p <- ggplot(data=finalDF,mapping=aes(x=Revenue,y=Expenses,Industry,
colour=Industry,size=Profit)) +
geom_point()
ggplot(data=finalDF,mapping=aes(x=Revenue,y=Expenses,Industry,
colour=Industry,size=Profit)) +
geom_point()
p <- ggplot(data=finalDF) +
geom_point(aes(x=Revenue,y=Expenses,Industry,
colour=Industry,size=Profit))
p
# Scatterplot, classified by industry, showing revenue, expenses, profit
p <- ggplot(data=finalDF) +
geom_point(aes(x=Revenue,y=Expenses,
colour=Industry,size=Profit))
p
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF) +
geom_point(aes(x=Revenue,y=Expenses,
colour=Industry,size=Profit)) +
geom_smooth()
q
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF) +
geom_point(aes(x=Revenue,y=Expenses,
colour=Industry,size=Profit)) +
geom_smooth(x=Revenue,y=Expenses)
q
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses)) +
geom_point(colour=Industry,size=Profit) +
geom_smooth()
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses,
colour=Industry,size=Profit)) +
geom_point() +
geom_smooth()
q
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses,
colour=Industry,size=Profit)) +
geom_point() +
geom_smooth(fill=NA)
q
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses,
colour=Industry)) +
geom_point() +
geom_smooth(fill=NA)
q
# Scatterplot, showing industry trends for expenses-revenue relationship
q <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses,
colour=Industry)) +
geom_point() +
geom_smooth(fill=NA,size=1.2)
q
r <- ggplot(data=finalDF,aes(x=Revenue,y=Expenses,
colour=Industry)) +
geom_boxplot()
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_boxplot()
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_boxplot(aes(fill=Genre),colour="Black")
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_boxplot(aes(fill=Industry),colour="Black")
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",alpha=0.7)
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",size=0.75alpha=0.7)
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",size=0.75,alpha=0.7)
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",size=0.5,alpha=0.7)
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",alpha=0.7)
r
# Boxplots for growth in industry
r <- ggplot(data=finalDF,aes(x=Industry,y=Growth,
colour=Industry)) +
geom_jitter() +
geom_boxplot(aes(fill=Industry),colour="Black",size=0.5,alpha=0.7,outlier.colour = NA)
r
