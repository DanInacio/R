print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
number <- 80
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
number <- -1
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
?random
?random()
?Random
?runif
# Another One
lottery <- runif(6,min=1,max=50)
# Another One
lottery <- round(runif(6,min=1,max=50),0)
lottery
myTry <- c(1,2,3,4,5,6)
myTry
length(myTry)
?setdiff
setdiff(myTry,lottery)
myTry <- c(7,2,3,4,5,6)
setdiff(myTry,lottery)
myTry <- c(7,39,20,24,35,32)
setdiff(myTry,lottery)
length(setdiff(myTry,lottery))
myTry <- c(7,39,20,24,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
myTry <- c(7,39,21,24,35,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
myTry <- c(7,39,20,24,35,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
?for(i in ){
}
?for
?for
?for()
?for
n <- 10
result <- 0
n <- 10
result <- 0
for(i in 1:n){
result <- result + i
if(result == n)
break
}
result <- 0
for(i in 1:n){
result <- result + 1
if(result == n)
break
}
n <- 10
result <- 0
for(i in 1:n){
result <- result + 1
}
n <- 10
result <- 0
# ----------------------------------------------------------------------------
# Exercise 19: For/While Loops in R
n <- 1
while(n < 10){
result <- result + 1
n <- n+1
}
while(n <= 10){
result <- result + 1
n <- n+1
}
n <- 0
result <- 0
while(n < 10){
result <- result + 1
n <- n+1
}
# ----------------------------------------------------------------------------
# Creating a Data Frame
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed)
View(my.dataframe)
View(my.dataframe)
rownames(data.frame <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
rownames(data.frame,c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
?row.names
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
View(my.dataframe)
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
str(my.dataframe)
# Swapping dogs for cats
my.factors <- factor(my.dataframe,
levels = c("cat","dog"),
labels = c("dog","cat"))
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
rm(breed,months,size,weight)
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
my.dataframe
r
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
rm(breed,months,size,weight)
# ----------------------------------------------------------------------------
# Tidyverse Package
install.packages("tidyverse")
library(tidyverse)
# Manipulating Data: Dplyr and Tidyr Packages
library(tidyverse)
star <- starwars
View(star)
View(star)
star
# filter(...)
filter(star,species=="Droid")
star
# Initial Analysis
str(star)
star[,"Droid"]
View(star)
# filter(...)
filter(star,species="Droid")
star[,species=="Droid"]
star[,species]
star[,1]
View(star)
star[,"name"]
star[,"species"]
star["species"]
star[,species]
star[,"species"]
star[,"species"=="Droid"]
# filter(...)
filter(star,species=="Droid")
star[,"species"=="Droid"]
star[,"species"="Droid"]
star[,"species"="Droid"]
star[star$species=="Droid"]
star[,star$species=="Droid"]
star$species=="Droid"
View(star)
filter <- star$species=="Droid"
star[,filter]
is.data.frame(star)
star[,t(filter)]
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
# filter(...)
filter(star,species=="Droid")
star[filter,]
# filter(...)
filter(star,species=="Droid")
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- star$species=="Droid"
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
view(star[filter,])
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
view(star[(star$species=="Droid") & (!is.na(star$species)),])
# filter(...)
filter(star,species=="Droid")
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
filter(star,species=="Droid",homeworld=="Tatooine")
# select(...) - keep the columns you want
select(star,name,birth_year,homeworld,species,starships)
select(star,name,homeworld:species)
select(star,ends_with("color"))
select(star,name,vehicles,starships,everything())
# mutate(...) - adds a new variable and preserves the rest
?mutate()
# mutate(...) - adds a new variable and preserves the rest
star <- mutate(star,bmi=mass/((height/100)^2))
select(star,name,bmi)
# Load Star Wars dataset (included with dplyr)
# TIBBLE DATASET!
star <- starwars
# OR
star$bmi <- star$mass/((star$height/100)^2)
star
star$bmi
select(star,name,bmi)
# Load Data
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\6. Linear Regression Analysis",
sep=""))
sal <- read.csv("regression_example.csv",stringsAsFactors = FALSE)
college <- read.csv("regression_example.csv",stringsAsFactors = FALSE)
rm(sal)
View(college)
# Initial Analysis
str(college)
summary(college)
describe(college)
library(tidyverse)
library(psych)
describe(college)
# Linear Model
# y_hat = b0 + b1x1 + epsilon
?lm
linear_model <- lm(formula=GPA ~ SAT,data=college)
linear_model
# View your Linear Model
ggplot(data=college,aes=(x=SAT,y=GPA)) +
geom_point()
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point()
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
geom_smooth(fill=NA)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA")
summary(linmod)
summary(linear_model)
linear_model
summary(linear_model)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(data=linear_model)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(method = linear_model)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(method=linear_model,se=FALSE)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
stat_smooth(method=linear_model,se=FALSE)
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(method="lm",se=FALSE)
?geom_smooth
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(method="lm",se=TRUE) # To print your linear model
# View your Linear Model
ggplot(data=college,aes(x=SAT,y=GPA)) +
geom_point() +
theme_light() +
labs(x="SAT Scores",
y="GPA upon Graduation",
title="SAT and GPA") +
geom_smooth(method="lm",se=FALSE) # To print your linear model
# Interpret the regression results
linear_model
summary(linear_model)
summary(linear_model)
summary(linear_model)
# Load Data
housing <- read.csv("real_estate_price_size_year_view.csv",
stringsAsFactors = FALSE)
# Initial Analysis
str(housing)
summary(housing)
housing <- as.tibble(housing)
housing <- as_tibble(housing)
View(housing)
View(linear_model)
View(housing)
housing <- as.factor(housing$view)
housing <- read.csv("real_estate_price_size_year_view.csv",
stringsAsFactors = FALSE)
housing <- as_tibble(housing)
housing$view <- as.factor(housing$view)
# Initial Analysis
str(housing)
# Linear Models
LM_Price_Size <- lm(formula=price ~ size,data=housing)
LM_Price_Year <- lm(formula=price ~ year,data=housing)
summary(LM_Price_Size)
summary(LM_Price_Year)
summary(housing)
# Initial Analysis
str(housing)
LM_Price_View <- lm(formula=price ~ view,data=housing)
summary(LM_Price_View)
summary(LM_Price_View)
# Linear Models
LM_Price_Size <- lm(formula=price ~ size,data=housing)
summary(LM_Price_Size)
ggplot(data=housing,aes(x=year,y=size)) +
geom_point()
ggplot(data=housing,aes(x=year,y=price)) +
geom_point()
ggplot(data=housing,aes(x=size,y=price)) +
geom_point()
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price")
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
geom_smooth(method="lm",se=TRUE)
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
geom_smooth(method="lm",se=FALSE)
ggplot(data=housing,aes(x=view,y=price)) +
geom_point() +
theme_light()
ggplot(data=housing,aes(x=view,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
geom_smooth(method="lm",se=FALSE)
summary(LM_Price_View)
summary(LM_Price_Year) # NOT RELEVANT
summary(LM_Price_Size)
# Plot the Models
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
geom_smooth(method="lm",se=FALSE)
# Plot the Models
point <- format_format(big.mark = " ", decimal.mark = ",", scientific = FALSE)
library(scales) # Create a custom format when plotting the data
# Plot the Models
point <- format_format(big.mark = " ", decimal.mark = ",", scientific = FALSE)
# this helps us get rid of the scientific notation in the graph
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
geom_smooth(method="lm",se=FALSE)
# this helps us get rid of the scientific notation in the graph
ggplot(data=housing,aes(x=size,y=price)) +
geom_point() +
theme_light() +
labs(x="Size",
y="Price",
title="Size vs. Price") +
scale_x_continuous(labels = point) + # this is where we tell ggplot2 to use
scale_y_continuous(labels = point) + # the format we set up above (point)
geom_smooth(method="lm",se=FALSE)
summary(LM_Price_Size)
