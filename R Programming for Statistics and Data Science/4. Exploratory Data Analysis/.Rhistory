print("Congrats!")
} else
print("Lost...")
}
?for(i in ){
}
?for
?for
?for()
?for
n <- 10
result <- 0
n <- 10
result <- 0
for(i in 1:n){
result <- result + i
if(result == n)
break
}
result <- 0
for(i in 1:n){
result <- result + 1
if(result == n)
break
}
n <- 10
result <- 0
for(i in 1:n){
result <- result + 1
}
n <- 10
result <- 0
# ----------------------------------------------------------------------------
# Exercise 19: For/While Loops in R
n <- 1
while(n < 10){
result <- result + 1
n <- n+1
}
while(n <= 10){
result <- result + 1
n <- n+1
}
n <- 0
result <- 0
while(n < 10){
result <- result + 1
n <- n+1
}
# ----------------------------------------------------------------------------
# Creating a Data Frame
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed)
View(my.dataframe)
View(my.dataframe)
rownames(data.frame <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
rownames(data.frame,c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
?row.names
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
View(my.dataframe)
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
str(my.dataframe)
# Swapping dogs for cats
my.factors <- factor(my.dataframe,
levels = c("cat","dog"),
labels = c("dog","cat"))
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
rm(breed,months,size,weight)
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
my.dataframe
r
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
rm(breed,months,size,weight)
# ----------------------------------------------------------------------------
# Tidyverse Package
install.packages("tidyverse")
library(tidyverse)
# Manipulating Data: Dplyr and Tidyr Packages
library(tidyverse)
star <- starwars
View(star)
View(star)
star
# filter(...)
filter(star,species=="Droid")
star
# Initial Analysis
str(star)
star[,"Droid"]
View(star)
# filter(...)
filter(star,species="Droid")
star[,species=="Droid"]
star[,species]
star[,1]
View(star)
star[,"name"]
star[,"species"]
star["species"]
star[,species]
star[,"species"]
star[,"species"=="Droid"]
# filter(...)
filter(star,species=="Droid")
star[,"species"=="Droid"]
star[,"species"="Droid"]
star[,"species"="Droid"]
star[star$species=="Droid"]
star[,star$species=="Droid"]
star$species=="Droid"
View(star)
filter <- star$species=="Droid"
star[,filter]
is.data.frame(star)
star[,t(filter)]
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
# filter(...)
filter(star,species=="Droid")
star[filter,]
# filter(...)
filter(star,species=="Droid")
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- star$species=="Droid"
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
view(star[filter,])
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
view(star[(star$species=="Droid") & (!is.na(star$species)),])
# filter(...)
filter(star,species=="Droid")
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
filter(star,species=="Droid",homeworld=="Tatooine")
# select(...) - keep the columns you want
select(star,name,birth_year,homeworld,species,starships)
select(star,name,homeworld:species)
select(star,ends_with("color"))
select(star,name,vehicles,starships,everything())
# mutate(...) - adds a new variable and preserves the rest
?mutate()
# mutate(...) - adds a new variable and preserves the rest
star <- mutate(star,bmi=mass/((height/100)^2))
select(star,name,bmi)
# Load Star Wars dataset (included with dplyr)
# TIBBLE DATASET!
star <- starwars
# OR
star$bmi <- star$mass/((star$height/100)^2)
star
star$bmi
select(star,name,bmi)
summary(star)
col.1 <- c(1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,5,5,7)
col.2 <- c(1,1,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7,7)
col.3 <- c(1,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,7,7)
df <- data.frame(col.1,col.2,col.3)
rm(col.1,col.2,col.3)
# summary() - provides relevant data on mean and median
summary(df)
library(tidyverse)
pl_1 <- ggplot(df,aes(x=col.1))
pl_1
pl_1 <- ggplot(df,aes(x=col.1))
pl_1 + geom_histogram()
pl_1 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Positive Skew")
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew")
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew")
pl_2 <- ggplot(df,aes(x=col.3))
pl_2 <- ggplot(df,aes(x=col.2))
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew")
pl_3 <- ggplot(df,aes(x=col.3))
pl_3 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Negative Skew")
# summary() - provides relevant data on mean and median
summary(df)
pl_1 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Positive Skew") # Mean > Median
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew") # Mean = Median
pl_3 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() + # Mean < Median
labs(title="Negative Skew")
pl_1 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Positive Skew") # Mean > Median (outliers to the right)
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew") # Mean = Median (symmetrical)
pl_3 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Negative Skew") # Mean < Median (outliers to the left)
pl_1 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Positive/Right Skew") # Mean > Median (outliers to the right)
pl_2 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Zero Skew") # Mean = Median (symmetrical)
pl_3 + geom_histogram(binwidth = 1,colour="white",fill="red4") +
theme_light() +
labs(title="Negative/Left Skew") # Mean < Median (outliers to the left)
# ----------------------------------------------------------------------------
# EXERCISE
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\4. Exploratory Data Analysis",
sep=""))
skew_1 <- read.csv("skew_1.csv",
stringsAsFactors = FALSE)
skew_2 <- read.csv("skew_2.csv",
stringsAsFactors = FALSE)
View(skew_1)
# Identify the skews visually and numerically
summary(skew_1)
summary(skew_2)
View(skew_1)
View(skew_2)
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram() +
theme_light()
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram(binwidth = 100,colour="white",fill="red4") +
theme_light()
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram(binwidth = 200,colour="white",fill="red4") +
theme_light()
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram(binwidth = 150,colour="white",fill="red4") +
theme_light()
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram(binwidth = 50,colour="white",fill="red4") +
theme_light()
sk1 <- ggplot(skew_1,aes(x=Dataset.1))
sk1 + geom_histogram(binwidth = 100,colour="white",fill="red4") +
theme_light()
sk2 + geom_histogram(binwidth = 100,colour="white",fill="red4") +
theme_light() +
labs(title="Negative/Left Skew") # Mean < Median (outliers to the left)
sk2 <- ggplot(skew_1,aes(x=Dataset.2))
sk2 + geom_histogram(binwidth = 100,colour="white",fill="red4") +
theme_light() +
labs(title="Negative/Left Skew") # Mean < Median (outliers to the left)
sk2 <- ggplot(skew_2,aes(x=Dataset.2))
sk2 + geom_histogram(binwidth = 100,colour="white",fill="red4") +
theme_light() +
labs(title="Negative/Left Skew") # Mean < Median (outliers to the left)
library(psych)
install.packages("psych")
library(psych)
describe(skew_1)
describe(skew_2)
homes <- read.csv("landdata-states.csv",
stringsAsFactors = FALSE)
View(homes)
homes <- as.tibble(homes)
homes <- as_tibble(homes)
?subset
View(homes)
homes[homes$Date=="2001.25",]
homes.subset <- homes[homes$Date=="2001.25",]
View(homes.subset)
homeplot <- ggplot(data=homes.subset,aes(x=Land.Value,y=Structure.Cost))
homeplot + geom_point()
View(homes.subset)
View(homes.subset)
homeplot <- ggplot(data=homes.subset,aes(x=log(Land.Value),y=Structure.Cost))
homeplot + geom_point()
homeplot <- ggplot(data=homes.subset,aes(x=Land.Value,y=Structure.Cost))
homeplot + geom_point()
homeplot <- ggplot(data=homes.subset,aes(x=log(Land.Value),y=Structure.Cost))
homeplot + geom_point()
homeplot + geom_point() + theme_light() +
labs(x="Land Value (Logarithmic)",y="Structure Cost")
homeplot + geom_point() + theme_light() +
labs(x="Land Value (Logarithmic)",
y="Structure Cost",
title="Relationship between land value and structure cost")
# Corrleation Coefficient
cor(homes)
# Corrleation Coefficient
cor(homes$Land.Value,homes$Structure.Cost)
cor.test(homes$Land.Value,homes$Structure.Cost)
# ----------------------------------------------------------------------------
# EXERCISE
customer <- read.csv("practical_customer.csv",
stringsAsFactors = FALSE)
product <- read.csv("practical_product.csv",
stringsAsFactors = FALSE)
View(customer)
View(product)
summary(customer)
summary(product)
View(customer)
View(product)
price <- ggplot(data=product,aes(x=Price))
price + geom_histogram()
price + geom_histogram(binwidth=100000)
describe(product)
describe(product$Price)
price + geom_histogram(binwidth=100000,colour="white",fill="red4") +
theme_light()
describe(product$Price)
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal()
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal() +
scale_x_continuous(labels=comma)
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal() +
scale_x_continuous(labels=dot)
# Task 3: Interpret the results.
describe(product$Price)
price <- ggplot(data=product,aes(x=Price))
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal() +
scale_x_continuous(labels=comma)
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal() +
scale_x_continuous(labels = function(x) format(x, scientific = FALSE))
# Task 4: Create a scatter plot showing the relationship between Price
# and Area. Use the data on all apartments, no matter if sold or not.
# Interpret the results.
sc_price_area <- ggplot(data=product,aes(x=Price,y=Area))
sc_price_area + geom_point()
# Task 4: Create a scatter plot showing the relationship between Price
# and Area. Use the data on all apartments, no matter if sold or not.
# Interpret the results.
sc_price_area <- ggplot(data=product,aes(x=Price,y=Area..ft..))
sc_price_area + geom_point() + theme_light() +
labs(x="Land Value (Logarithmic)",
y="Structure Cost",
title="Relationship between land value and structure cost")
sc_price_area + geom_point()
sc_price_area <- ggplot(data=product,aes(x=Price,y=Area..ft..))
sc_price_area + geom_point() + theme_light()
sc_price_area + geom_point() + theme_light() +
labs(x="Price",
y="Area",
title="Relationship between price and area")
sc_price_area + geom_point() + theme_light() +
labs(x="Price in USD",
y="Area in square feet",
title="Relationship between price and area")
sc_price_area + geom_point() + theme_light() +
labs(x="Price in USD",
y="Area in square feet",
title="Relationship between Price and Area")
sc_price_area + geom_point() + theme_light() +
labs(x="Price in USD",
y="Area in square feet",
title="Relationship between Price and Area") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
# Task 4: Create a scatter plot showing the relationship between Price
# and Area. Use the data on all apartments, no matter if sold or not.
# Interpret the results.
sc_price_area <- ggplot(data=product,aes(x=Area..ft..,y=Price))
sc_price_area + geom_point() + theme_light() +
labs(x="Price in USD",
y="Area in square feet",
title="Relationship between Price and Area") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
# Task 5: Calculate the mean, median, mode, skewness, and standard deviation
# of Price for all apartments, no matter if sold or not.
describe(product$Price)
# Function that returns the mode
mode <- function(x){
ta <- table(x)
tam <- max(ta)
if (all(ta == tam))
mod <- NA
else
if(is.numeric(x))
mod <- as.numeric(names(ta)[ta == tam])
else
mod <- names(ta)[ta == tam]
return(mod)
}
mode(product$Price)
# Task 5: Calculate the mean, median, mode, skewness, and standard deviation
# of Price for all apartments, no matter if sold or not.
describe(product$Price)
price + geom_histogram(binwidth=100000,colour="darkslategray",
fill="darkslategray4",alpha = 0.7) +
ggtitle("House Prices Frequency Distribution") +
labs(y="Number of Houses",
x="Price") +
theme_minimal() +
scale_x_continuous(labels = function(x) format(x, scientific = FALSE))
# Task 7: Calculate the correlation between Price and Area.
cor(product$Price,product$Area..ft..)
cor.test(product$Price,product$Area..ft..)
