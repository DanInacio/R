levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
rm(breed,months,size,weight)
# ----------------------------------------------------------------------------
# Tidyverse Package
install.packages("tidyverse")
library(tidyverse)
# Manipulating Data: Dplyr and Tidyr Packages
library(tidyverse)
star <- starwars
View(star)
View(star)
star
# filter(...)
filter(star,species=="Droid")
star
# Initial Analysis
str(star)
star[,"Droid"]
View(star)
# filter(...)
filter(star,species="Droid")
star[,species=="Droid"]
star[,species]
star[,1]
View(star)
star[,"name"]
star[,"species"]
star["species"]
star[,species]
star[,"species"]
star[,"species"=="Droid"]
# filter(...)
filter(star,species=="Droid")
star[,"species"=="Droid"]
star[,"species"="Droid"]
star[,"species"="Droid"]
star[star$species=="Droid"]
star[,star$species=="Droid"]
star$species=="Droid"
View(star)
filter <- star$species=="Droid"
star[,filter]
is.data.frame(star)
star[,t(filter)]
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
# filter(...)
filter(star,species=="Droid")
star[filter,]
# filter(...)
filter(star,species=="Droid")
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- star$species=="Droid"
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
view(star[filter,])
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
view(star[(star$species=="Droid") & (!is.na(star$species)),])
# filter(...)
filter(star,species=="Droid")
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
filter(star,species=="Droid",homeworld=="Tatooine")
# select(...) - keep the columns you want
select(star,name,birth_year,homeworld,species,starships)
select(star,name,homeworld:species)
select(star,ends_with("color"))
select(star,name,vehicles,starships,everything())
# mutate(...) - adds a new variable and preserves the rest
?mutate()
# mutate(...) - adds a new variable and preserves the rest
star <- mutate(star,bmi=mass/((height/100)^2))
select(star,name,bmi)
# Load Star Wars dataset (included with dplyr)
# TIBBLE DATASET!
star <- starwars
# OR
star$bmi <- star$mass/((star$height/100)^2)
star
star$bmi
select(star,name,bmi)
library(tidyverse)
# Load dataset
getwd()
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\2. Data Frames and Tidyverse\\tidyr",
sep=""))
# Load dataset
getwd()
billboard <- read.csv("billboard.csv",
stringsAsFactors = FALSE)
View(billboard)
# As tibble
billboard <- as.tibble(billboard)
# As tibble
billboard <- as_tibble(billboard)
is.tibble(billboard)
is_tibble(billboard)
billboard
# gather(...) - reorganizes data that has values as column names
?gather()
# gather(...) - reorganizes data that has values as column names
gather(billboard,"x1st.week":"x76th.week",
key="Week",value="Rank",na.rm=TRUE)
# gather(...) - reorganizes data that has values as column names
billboard.gathered <- gather(billboard,"x1st.week":"x76th.week",
key="Week",value="Rank",na.rm=TRUE)
View(billboard.gathered)
billboard.gathered <- arrange(billboard.gathered,artist.inverted)
View(billboard.gathered)
billboard.gathered <- arrange(artist.inverted)
# separate(...) -
# MUTIPLE VARIABLES IN THE SAME COLUMN is messy data
# separate(...) is the solution
tb <- read.csv("tb.csv",
stringsAsFactors = FALSE)
View(tb)
?separate()
tb.separated <- separate(tb,sep=".")
tb <- as_tibble(tb)
tb.separated <- separate(tb,sep=".")
View(tb)
# Since values are as columns, first apply gather(...)
tb.separated <- gather(tb,"m.014":"f.65",
key="column",value="cases",na.rm=TRUE)
View(tb.separated)
View(tb.separated)
View(tb.separated)
# Now separate the different values of the columns
tb.separated <- separate(tb,col="column",sep=".")
# Now separate the different values of the columns
tb.separated <- separate(tb.separated,col="column",sep=".")
View(tb.separated)
View(tb.separated)
arrange(tb.separated,country)
tb.separated <- arrange(tb.separated,country)
View(tb.separated)
# Since values are as columns, first apply gather(...)
tb.gathered <- gather(tb,"m.014":"f.65",
key="column",value="cases",na.rm=TRUE)
tb.gathered <- arrange(tb.separated,country)
# Now separate the different values of the columns
tb.separated <- separate(tb.gathered,col="column",sep=".")
# Now separate the different values of the columns
tb.separated <- separate(tb.gathered,col="column",sep=".",
into=c("Gender","Age Range"))
View(tb.separated)
View(tb.gathered)
View(tb.separated)
# Now separate the different values of the columns
tb.separated <- separate(tb.gathered,col="column",sep='.',
into=c("Gender","Age"))
# Now separate the different values of the columns
tb.separated <- separate(tb.gathered,col="column",
into=c("Gender","Age"),sep='.')
# Now separate the different values of the columns
tb.separated <- separate(tb.gathered,col="column",
into=c("Gender","Age"))
View(tb.separated)
View(tb.separated)
# Hyphenate the age range
tb.separated$Age <- str_replace_all(tb.separated$age,"0","0-")
# Hyphenate the age range
tb.separated$Age <- str_replace_all(tb.separated$Age,"0","0-")
View(tb.separated)
tb.separated$Age <- str_replace_all(tb.separated$Age,"15","15-")
tb.separated$Age <- str_replace_all(tb.separated$Age,"25","25-")
tb.separated$Age <- str_replace_all(tb.separated$Age,"35","35-")
tb.separated$Age <- str_replace_all(tb.separated$Age,"45","45-")
tb.separated$Age <- str_replace_all(tb.separated$Age,"55","55-")
tb.separated$Age <- str_replace_all(tb.separated$Age,"65","65-100")
View(tb.separated)
View(tb.separated)
?unite
View(tb.separated)
# Let's put the age gap into two columns, low and high
tb.separated <- (tb.separated,col="Age",
into=c("AgeLow","AgeHigh"),sep="-")
# Let's put the age gap into two columns, low and high
tb.separated <- separate(tb.separated,col="Age",
into=c("AgeLow","AgeHigh"),sep="-")
View(tb.separated)
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,col=c("AgeLow","AgeHigh"),
into="Age",sep="-")
View(tb.separated)
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,col=c("Age",c("AgeLow","AgeHigh")),sep="-")
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")),sep="-")
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")),sep='-')
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")))
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
c("AgeUnited",c("AgeLow","AgeHigh")))
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")),sep="-")
library(tidyverse)
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")))
# Let's put the age gap into two columns, low and high
tb.separated <- separate(tb.separated,col="Age",
into=c("AgeLow","AgeHigh"),sep='-')
# Let's put the age gap back into one column
tb.united <- unite(tb.separated,
col=c("AgeUnited",c("AgeLow","AgeHigh")),sep="-")
rlang::last_error()
tb.united <- tb.separated
View(tb.united)
tb.united$AgeUnited <- paste(tb.separated$AgeLow,"-",tb.separated$AgeHigh)
View(tb.united)
tb.united$AgeHigh <- NULL
View(tb.united)
tb.united$AgeLow <- NULL
View(tb.united)
View(tb.united)
?select
tb.united <- select(country,year,Gender,AgeUnited,everything())
tb.united <- select(tb.united,country,year,Gender,AgeUnited,everything())
View(tb.united)
weather <- load.csv("weather.csv",
stringsAsFactors = FALSE)
weather <- read.csv("weather.csv",
stringsAsFactors = FALSE)
View(weather)
weather <- as_tibble(weather)
weather
View(weather)
weather.spread <- ?spread
rm(weather.spread)
# Notice that, because of the messy data, days are repeated!
?spread
weather.spread <- spread(weather,key="element",value="value")
View(weather.spread)
View(weather)
View(weather)
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\2. Data Frames and Tidyverse\\tidyr\\EXERCISE",
sep=""))
weather <- read.csv("weather_untidy.csv",
stringsAsFactors = FALSE)
View(weather)
# As tibble
weather <- as_tibble(weather)
is_tibble(weather)
weather
# Gather (d1 to d31 are one single variable)
# gather(...) is the solution
weather.gathered <- gather(weather,"d1":"d31",
key="Day",value="value",na.rm=TRUE)
View(weather.gathered)
?parse_number
weather.gathered$Day <- parse_number(weather.gathered$Day)
View(weather.gathered)
View(weather.gathered)
# Spread (TMAX and TMIN are column names, not values)
weather.spread <- spread(weather.gathered,key="Element",value="Value")
# Spread (TMAX and TMIN are column names, not values)
weather.spread <- spread(weather.gathered,key="element",value="MinMax")
# Spread (TMAX and TMIN are column names, not values)
# Key is the data we are changing, Value is what we are preserving
weather.spread <- spread(weather.gathered,key="element",value="value")
View(weather.spread)
getwd()
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\2. Data Frames and Tidyverse\\tidyr\\EXERCISE",
sep=""))
weather <- read.csv("tb_untidy.csv",
stringsAsFactors = FALSE)
getwd()
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\2. Data Frames and Tidyverse\\tidyr\\EXERCISE",
sep=""))
tb <- read.csv("tb_untidy.csv",
stringsAsFactors = FALSE)
View(tb)
tb <- as.tibble(tb)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,"m04":"f65",Key="Data",Value="Values")
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,"m04":"f65",key="Data",value="Values")
View(tb.gathered)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,"m04":"f65",key="column",value="cases")
View(tb.gathered)
?str_replace
# We need a separator symbol!
tb.separated <- str_replace(tb.gathered$column,"m","m.")
# We need a separator symbol!
tb.separated <- str_replace(tb.gathered$column,"m","m.",drop=FALSE)
# We need a separator symbol!
tb.separated <- mutate(tb.gathered,str_replace(tb.gathered$column,"m","m."))
View(tb.separated)
View(tb.separated)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
View(tb.separated)
View(tb.gathered)
?count()
sum(is.na(tb.gathered$fu))
tb.gathered$fu <- NULL
View(tb.gathered)
View(tb.gathered)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
View(tb.separated)
tb.separated <- mutate(tb.separated,
column=str_replace(tb.gathered$column,"f","f."))
View(tb.separated)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
View(tb.separated)
View(tb.separated)
tb.separated <- mutate(tb.separated,
column=str_replace(tb.gathered$column,"f","f."))
View(tb.separated)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.replace <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
tb.separated <- mutate(tb.separated,
column=str_replace(tb.separated$column,"f","f."))
rm(tb.replace)
View(tb.separated)
View(tb)
View(tb)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,("m04":"m65") & (f04:f65),
key="column",value="cases")
View(tb.gathered)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,("m04":"m65") & (f04:f65),
key="column",value="cases")
View(tb.gathered)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,(("m04":"m65") & (f04:f65)),
key="column",value="cases")
View(tb.gathered)
View(tb)
# Initial Analysis
str(tb)
summary(tb)
tb$mu <- NULL
tb$fu <- NULL
tb$f04 <- NULL
tb$f514 <- NULL
tb$m04 <- NULL
tb$m514 <- NULL
View(tb)
View(tb)
# Gather (male and female are columns and they should be values)
# Key is the new variable for the column
# Value is the new variable for the values into that column
tb.gathered <- gather(tb,"m014":"f65",
key="column",value="cases")
View(tb.gathered)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
tb.separated <- mutate(tb.separated,
column=str_replace(tb.separated$column,"f","f."))
View(tb.separated)
# Now separate
tb.separated <- separate(tb.separated,col="column",
into=c("Gender","Age"),sep=".")
View(tb.separated)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
tb.separated <- mutate(tb.separated,
column=str_replace(tb.separated$column,"f","f."))
View(tb.separated)
# Now separate
tb.tidy <- separate(tb.separated,col="column",
into=c("Gender","Age"),sep='.')
View(tb.tidy)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
tb.separated <- mutate(tb.separated,
column=str_replace(tb.separated$column,"f","f."))
# Now separate
tb.tidy <- separate(tb.separated,col="column",
into=c("Gender","Age"))
View(tb.tidy)
View(tb.tidy)
# Hyphenate the age range
tb.separated$Age <- str_replace_all(tb.separated$Age,"0","0-")
# Hyphenate the age range
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"0","0-")
View(tb.tidy)
View(tb.separated)
# Hyphenate the age range
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"0","0-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"15","15-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"25","25-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"35","35-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"45","45-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"55","55-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"65","65-100")
View(tb.tidy)
# We need a separator symbol! Use mutate so it won't drop the data frame
tb.separated <- mutate(tb.gathered,
column=str_replace(tb.gathered$column,"m","m."))
tb.separated <- mutate(tb.separated,
column=str_replace(tb.separated$column,"f","f."))
# Now separate
tb.tidy <- separate(tb.separated,col="column",
into=c("Gender","Age"))
# Hyphenate the age range
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"0","0-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"15","15-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"25","25-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"35","35-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"45","45-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"55","55-")
tb.tidy$Age <- str_replace_all(tb.tidy$Age,"65","65-100")
View(tb.tidy)
View(tb.tidy)
# Reorder as you please
tb.tidy <- select(country,everything())
View(tb.tidy)
# Reorder as you please
tb.tidy <- select(tb.tidy,country,everything())
View(tb.tidy)
# Reorder as you please
tb.tidy <- arrange(tb.tidy,desc(country))
View(tb.tidy)
# Reorder as you please
tb.tidy <- arrange(tb.tidy,asc(country))
# Reorder as you please
tb.tidy <- arrange(tb.tidy,country)
View(tb.tidy)
