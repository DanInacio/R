l[[2]][2]
l[2]
l[[2]][1]
l[[1]]
l[1]
l[1]+2
l[[1]]+2
# ----------------------------------------------------------------------------
# Exercise 16: Lists in R
l <- list(Numbers=c(1,3,5,7,9,11),Phrases=list("Happy Birthday","Archery"))
l
l[[1]]
l[[2]][1]
l[[2]][2]
l[2]
l[1]
l[[1]]+2
l$Brands <- c("Kellogs","Nike","IPhone")
l
l$Brands[3]
l$Brands[3] <- NULL
l
l$Brands[3]
l$Brands[3] <- NULL
l$Brands[3] <- l$Brands[-3]
View(l)
l$Brands <- c("Kellogs","Nike","IPhone")
l
l$Brands[3] <- l$Brands[-3]
View(l)
l$Brands <- NULL
?if((number >= 1) & (number < 60)){
print("Rotten!")
}
?if
?else
number <- 60
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
number <- 59
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
number <- 80
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
number <- -1
if((number >= 1) & (number < 60)){
print("Rotten!")
} else if((number >= 60) & (number < 75)){
print("Fresh!")
} else if((number >= 75) & (number <+ 100)){
print("Certified Fresh!")
} else
print("Please input a number between 1 and 100")
?random
?random()
?Random
?runif
# Another One
lottery <- runif(6,min=1,max=50)
# Another One
lottery <- round(runif(6,min=1,max=50),0)
lottery
myTry <- c(1,2,3,4,5,6)
myTry
length(myTry)
?setdiff
setdiff(myTry,lottery)
myTry <- c(7,2,3,4,5,6)
setdiff(myTry,lottery)
myTry <- c(7,39,20,24,35,32)
setdiff(myTry,lottery)
length(setdiff(myTry,lottery))
myTry <- c(7,39,20,24,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
myTry <- c(7,39,21,24,35,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
myTry <- c(7,39,20,24,35,32)
if(length(myTry) != 6){
print("Invalid ticket. Choose 6 values")
} else{
if(length(setdiff(myTry,lottery)) == 0){
print("Congrats!")
} else
print("Lost...")
}
?for(i in ){
}
?for
?for
?for()
?for
n <- 10
result <- 0
n <- 10
result <- 0
for(i in 1:n){
result <- result + i
if(result == n)
break
}
result <- 0
for(i in 1:n){
result <- result + 1
if(result == n)
break
}
n <- 10
result <- 0
for(i in 1:n){
result <- result + 1
}
n <- 10
result <- 0
# ----------------------------------------------------------------------------
# Exercise 19: For/While Loops in R
n <- 1
while(n < 10){
result <- result + 1
n <- n+1
}
while(n <= 10){
result <- result + 1
n <- n+1
}
n <- 0
result <- 0
while(n < 10){
result <- result + 1
n <- n+1
}
# ----------------------------------------------------------------------------
# Creating a Data Frame
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed)
View(my.dataframe)
View(my.dataframe)
rownames(data.frame <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
rownames(data.frame,c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
View(my.dataframe)
?row.names
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie"))
row.names(data.frame) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
View(my.dataframe)
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
str(my.dataframe)
# Swapping dogs for cats
my.factors <- factor(my.dataframe,
levels = c("cat","dog"),
labels = c("dog","cat"))
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
rm(breed,months,size,weight)
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
my.dataframe
r
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("dog","cat")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
# Swapping dogs for cats
levels(my.dataframe[,"Breed"]) = c("cat","dog")
my.dataframe
str(my.dataframe)
months <- c(53,19,34,41,84,140,109)
size <- c("medium","small","medium","large","small","small","large")
weight <- c(21,8,4,6,7,2,36)
breed <- c("dog","dog","cat","cat","dog","cat","dog")
my.dataframe <- data.frame("Months Old"=months,
"Size"=size,
"Weight"=weight,
"Breed"=breed,stringsAsFactors=TRUE)
row.names(my.dataframe) <- c("Flipper","Bromley","Nox","Orion",
"Dagger","Zizi","Carrie")
my.dataframe
str(my.dataframe)
rm(breed,months,size,weight)
# ----------------------------------------------------------------------------
# Tidyverse Package
install.packages("tidyverse")
library(tidyverse)
# Manipulating Data: Dplyr and Tidyr Packages
library(tidyverse)
star <- starwars
View(star)
View(star)
star
# filter(...)
filter(star,species=="Droid")
star
# Initial Analysis
str(star)
star[,"Droid"]
View(star)
# filter(...)
filter(star,species="Droid")
star[,species=="Droid"]
star[,species]
star[,1]
View(star)
star[,"name"]
star[,"species"]
star["species"]
star[,species]
star[,"species"]
star[,"species"=="Droid"]
# filter(...)
filter(star,species=="Droid")
star[,"species"=="Droid"]
star[,"species"="Droid"]
star[,"species"="Droid"]
star[star$species=="Droid"]
star[,star$species=="Droid"]
star$species=="Droid"
View(star)
filter <- star$species=="Droid"
star[,filter]
is.data.frame(star)
star[,t(filter)]
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
filter <- (star$species=="Droid") & (complete.cases(star))
# filter(...)
filter(star,species=="Droid")
star[filter,]
# filter(...)
filter(star,species=="Droid")
filter <- (star$species=="Droid") & (complete.cases(star))
filter <- star$species=="Droid"
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$name))
star[filter,]
filter <- (star$species=="Droid") & (!is.na(star$species))
star[filter,]
view(star[filter,])
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
view(star[(star$species=="Droid") & (!is.na(star$species)),])
# filter(...)
filter(star,species=="Droid")
# OR
star[(star$species=="Droid") & (!is.na(star$species)),]
filter(star,species=="Droid",homeworld=="Tatooine")
# select(...) - keep the columns you want
select(star,name,birth_year,homeworld,species,starships)
select(star,name,homeworld:species)
select(star,ends_with("color"))
select(star,name,vehicles,starships,everything())
# mutate(...) - adds a new variable and preserves the rest
?mutate()
# mutate(...) - adds a new variable and preserves the rest
star <- mutate(star,bmi=mass/((height/100)^2))
select(star,name,bmi)
# Load Star Wars dataset (included with dplyr)
# TIBBLE DATASET!
star <- starwars
# OR
star$bmi <- star$mass/((star$height/100)^2)
star
star$bmi
select(star,name,bmi)
# ---------------------------------------------------------------------------
# TEST FOR THE MEAN - Population Variance Known
library(tidyverse)
# Load Data
getwd()
setwd(paste("C:\\Users\\Daniel.Inacio\\Desktop",
"\\R Programming for Statistics and Data Science",
"\\5. Hypothesis Testing",
sep=""))
sal <- read.csv("ztest-a.csv",stringsAsFactors = FALSE)
sal <- read.csv("ztest-a.csv",stringsAsFactors = FALSE)
View(sal)
summary(sal)
# We need to normalize our data into z-values!!!
z_test <- function(a,mu,sd){
zeta = (mean(a)-mu) / (sd/sqrt(length(a)))
return(zeta)
}
z_test(a=sal$salary,mu=113000,sd=15000)
z_test(a=100200,mu=113000,sd=15000)
z_test(a=0.05,mu=113000,sd=15000)
z_test(a=0.025,mu=113000,sd=15000)
z_test(a=sal$salary,mu=113000,sd=15000)
z_test(a=sal$salary,mu=113000,sd=2739)
z_test(a=sal$salary,mu=113000,sd=15000)
describe(sal$salary)
# ---------------------------------------------------------------------------
# TEST FOR THE MEAN - Population Variance Known
library(psych)
describe(sal$salary)
cor.test(sal$salary)
cor.test(sal$salary,sal$salary)
# ---------------------------------------------------------------------------
# TEST FOR THE MEAN - Population Variance Unknown
rate <- read.csv("ttest-a.csv",stringsAsFactors = FALSE)
View(rate)
describe(rate)
describe(rate)
my.t.test <- function(a,hmean){
t = (mean(a) - hmean) / (sd(a)/sqrt(length(a)))
}
my.t.test(a=rate$Open.rate,mu=0.4)
my.t.test(a=rate$Open.rate,hmean=0.4)
return(t)
my.t.test <- function(a,hmean){
t = (mean(a) - hmean) / (sd(a)/sqrt(length(a)))
return(t)
}
my.t.test(a=rate$Open.rate,hmean=0.4)
# ----------------------------------------------------------------------------
# EXERCISE: What if the open rate was EXACTLY 40%?
# Test for 5% and 1% significance
my.t.test(a=rate$Open.rate,hmean=0.4) # T=0.53
library(pastecs)
install.packages("pastecs")
#install.packages("pastecs")
library(pastecs)
# ----------------------------------------------------------------------------
# Comparing 2 means: dependent samples
magn <- read.csv("dependent-samples.csv",stringsAsFactors = FALSE)
describe(rate)
View(magn)
describe(magn)
# T-Test for dependent samples (let's use R-Studio's function!!!)
?t.test
dep.t.test <- t.test(magn$Before,magn$After, paired=TRUE, alternative='less')
View(dep.t.test)
rm(dep.t.test)
dep.t.test <- t.test(magn$Before,magn$After,
paired=TRUE, # dependent samples
alternative='less') # 1-tailed and H1 description
dep.t.test
dep.t.test <- t.test(magn$Before,magn$After,
paired=TRUE, # dependent samples
alternative='less',
conf.level = 0.99) # 1-tailed and H1 description
dep.t.test
dep.t.test <- t.test(magn$Before,magn$After,
paired=TRUE, # dependent samples
alternative='less',
conf.level = 0.999) # 1-tailed and H1 description
dep.t.test
dep.t.test <- t.test(magn$Before,magn$After,
paired=TRUE, # dependent samples
alternative='less',
conf.level = 0.999) # 1-tailed and H1 description
dep.t.test
dep.t.test <- t.test(magn$Before,magn$After,
paired=TRUE, # dependent samples
alternative='less') # 1-tailed and H1 description
dep.t.test
stat.desc(magn)
describe(magn)
# ----------------------------------------------------------------------------
# EXERCISE
weight <- read.csv("weight_data_exercise_kg.csv",stringsAsFactors = FALSE)
describe(weight)
View(weight)
# H1 - after mean is lower than before mean
# H0 - after mean is equal or higher than before mean
dep.t.test.weight <- t.test(weight$Before,weight$After,
alternative='greater') # 1-tailed
# H1 - after mean is lower than before mean
# H0 - after mean is equal or higher than before mean
dep.t.test.weight <- t.test(weight$Before,weight$After,
paired=TRUE,
alternative='greater') # 1-tailed
View(weight)
# H1 - after mean is lower than before mean
# H0 - after mean is equal or higher than before mean
dep.t.test.weight <- t.test(weight$before,weight$after,
paired=TRUE,
alternative='greater') # 1-tailed
dep.t.test.weight
# Z-Test for independent samples (let's use R-Studio's function!!!)
?z.test
# ---------------------------------------------------------------------------
# TEST FOR THE MEAN - Population Variance Known
library(tidyverse)
# ----------------------------------------------------------------------------
# Comparing 2 means: Independent samples
grades <- read.csv("independent-samples.csv",stringsAsFactors = FALSE)
grades
View(grades)
View(grades)
# We can consider the column names to be values and join all grades into 1 var
grades <- gather(grades,Engineering,Management,
key="Course",value="Grades")
View(grades)
?t.test
# T-Test for independent samples (let's use R-Studio's function!!!)
ind.t.test <- t.test(grades$Course,grades$Grades,
paired=FALSE, # dependent samples
alternative='two-sided') # 2-tailed and H1 description
# T-Test for independent samples (let's use R-Studio's function!!!)
ind.t.test <- t.test(grades$Course,grades$Grades,
paired=FALSE, # dependent samples
alternative="two-sided") # 2-tailed and H1 description
grades <- read.csv("independent-samples.csv",stringsAsFactors = FALSE)
grades
# T-Test for independent samples (let's use R-Studio's function!!!)
ind.t.test <- t.test(grades$Engineering,grades$Management,
paired=FALSE, # dependent samples
alternative="two-sided") # 2-tailed and H1 description
# T-Test for independent samples (let's use R-Studio's function!!!)
ind.t.test <- t.test(grades$Engineering,grades$Management,
paired=FALSE, # independent samples
mu=-4,
alternative="two-sided") # 2-tailed and H1 description
# T-Test for independent samples (let's use R-Studio's function!!!)
ind.t.test <- t.test(grades$Engineering,grades$Management,
paired=FALSE, # independent samples
mu=-4)
ind.t.test
describe(grades)
ind.t.test
